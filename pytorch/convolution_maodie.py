#this code is generated by Deepseek
import torch
import torch.nn as nn
from torchvision import transforms
from PIL import Image
import matplotlib.pyplot as plt

def load_image(path):
    img = Image.open(path).convert('L') 
    transform = transforms.Compose([
        transforms.ToTensor()           
    ])
    return transform(img).unsqueeze(0)  

def create_edge_detector():
    kernel = torch.tensor([[[[-1, -1, -1],
                             [-1,  8, -1],
                             [-1, -1, -1]]]], dtype=torch.float32)
    
    conv = nn.Conv2d(
        in_channels=3, 
        out_channels=1, 
        kernel_size=3,
        padding=1,     
        bias=False
    )
    conv.weight.data = kernel
    return conv

def plot_images(original, result):
    plt.figure(figsize=(10, 5))
    
    plt.subplot(1, 2, 1)
    plt.imshow(original.squeeze(), cmap='gray')
    plt.title('Original Image')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(result, cmap='gray')
    plt.title('Edge Detection Result')
    plt.axis('off')
    
    plt.show()

if __name__ == "__main__":

    image_path = 'asset/maodie.jpg' 
    
    input_tensor = load_image(image_path)
    
    conv_layer = create_edge_detector()
    
    with torch.no_grad():
        output_tensor = conv_layer(input_tensor)
    
    output = output_tensor.squeeze().numpy()  
    output = (output - output.min()) / (output.max() - output.min()) 
    
    plot_images(input_tensor.squeeze().numpy(), output)